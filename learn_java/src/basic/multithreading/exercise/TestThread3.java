package basic.multithreading.exercise;
/*
线程安全问题的原因？
        由于一个线程在操作共享数据时，未执行完的情况下，另外的线程参与进来，导致共享数据存在了安全问题

        如何解决？
        必须让一个线程操作共享数据完毕之后，其他线程才有机会参与共享数据的操作

        Java如何实现线程的安全：线程的同步机制
        方式一：同步代码块(见window-window4)
        synchronized(同步监视器){
        //需要被同步的代码块（即为操作共享数据的代码）
        }
        注：1.共享数据：多个线程共同操作的同一个数据（变量）
        2.同步监视器：由一个类的对象来充当。哪个线程获取此监视器，谁就执行大括号里被同步的代码。俗称：锁
        3.所有的线程必须共用一把锁！
        4.在实现的方式中，考虑同步的话，可以用this来充当，但是在继承的方式中，慎用this

        方式二：同步方法(见window5

        */
public class TestThread3 {
}
